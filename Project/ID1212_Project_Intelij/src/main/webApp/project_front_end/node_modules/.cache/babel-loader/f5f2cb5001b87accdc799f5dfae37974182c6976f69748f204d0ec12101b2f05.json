{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krafr\\\\Documents\\\\GitHub\\\\ID1212-Natverksprogrammering\\\\Project\\\\ID1212_Project_Intelij\\\\src\\\\main\\\\webApp\\\\project_front_end\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport chatData from \"../chatData\";\nimport userData from \"../userData\";\nimport { Navigate, useNavigate } from \"react-router-dom\";\nimport { Button, Flex, Heading, Input, Image, useColorMode, useColorModeValue, Spacer, theme, Topbar, Avatar, FormControl, Text } from \"@chakra-ui/react\";\nimport ApiCall from \"../ApiInterface/ApiCall\";\nimport ApiPost from \"../ApiInterface/ApiPost\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chat(props) {\n  _s();\n  const navigate = useNavigate();\n  const formBackground = useColorModeValue(\"gray.100\", \"gray.700\");\n  const [whatChatToShow, setWhatChatToShow] = React.useState(0);\n  const [whatGroupToShow, setWhatGroupToShow] = React.useState(1);\n  const [messageToSend, setMessageToSend] = React.useState(\"\");\n  const [count, setCount] = React.useState(0);\n  const [messagesToShow, setMessagesToShow] = React.useState();\n  const [chatsUserIsPartOf, setChatsUserIsPartOf] = React.useState();\n  const [currentGroupMembers, setCurrentGroupMembers] = React.useState([0, \"Nobody\"]);\n  const [currentChat, setCurrentChat] = React.useState({\n    id: 0,\n    title: \"\",\n    messages: [{\n      message: \"\",\n      Sender: 0,\n      orderNumber: 1\n    }],\n    members: [0]\n  });\n  React.useEffect(() => {\n    getChatUserIsPartOf();\n    var requestLoop = setInterval(function () {\n      //Dont remove\n      const post = {\n        fk_conversation: {\n          id: 1,\n          name: \"hold\"\n        }\n      };\n      ApiPost.getMessagesFromChat(post).then(e => {\n        const textMessagesElement = e.map(el => {\n          if (el.fromUser !== props.currentUser) {\n            return /*#__PURE__*/_jsxDEV(Flex, {\n              background: \"red.200\",\n              width: \"fit-content\",\n              minWidth: \"100px\",\n              borderRadius: \"lg\",\n              p: 3,\n              alignSelf: \"flex-end\",\n              children: /*#__PURE__*/_jsxDEV(Text, {\n                children: [\"From \", el.fromUser, \": \", el.messageText]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 19\n              }, this)\n            }, el.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(Flex, {\n              background: \"green.200\",\n              width: \"fit-content\",\n              minWidth: \"100px\",\n              borderRadius: \"lg\",\n              p: 3,\n              children: /*#__PURE__*/_jsxDEV(Text, {\n                children: el.messageText\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 19\n              }, this)\n            }, el.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 17\n            }, this);\n          }\n        });\n        setMessagesToShow(textMessagesElement);\n      });\n      setCount(prevValue => prevValue++);\n      console.log(count);\n    }, 5000);\n  }, []);\n  React.useEffect(() => {\n    var users = [];\n    currentChat.members.map(e => {\n      users.push(userData.find(user => user.id === e));\n    });\n    setCurrentGroupMembers(users);\n  }, [currentChat]);\n  function switchChat(event) {\n    const buttonClicked = event.target.innerText;\n    const chatItem = chatData.find(element => element.title == buttonClicked);\n    setWhatChatToShow(chatItem.id);\n    setCurrentChat(chatItem);\n  }\n  function findUserName(id) {\n    if (id !== undefined && id !== 0) {\n      const usr = currentGroupMembers.find(e => e.id === id);\n      return \"h\";\n    } else {\n      return \"Error\";\n    }\n  }\n  function gree(element) {\n    const currentUser = props.userProfileInfoForUI.id;\n    const chatMembers = element.members;\n    return chatMembers.includes(currentUser);\n  }\n  function getChatUserIsPartOf() {\n    const post = {\n      id: props.userProfileInfoForUI.theRealID\n    };\n    ApiPost.getChatsUserIsPartOf(post).then(e => {\n      const chats = e.map(el => {\n        return /*#__PURE__*/_jsxDEV(Button, {\n          onClick: switchChat,\n          children: [\" \", el.name, \" \"]\n        }, el.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }, this);\n      });\n      setWhatGroupToShow(chats);\n    });\n  }\n  const chatsUserIsPartOf1 = chatData.filter(gree);\n  function navigateToProfile() {\n    navigate(\"/profile\");\n  }\n  function getMessages() {\n    const post = {\n      fk_conversation: {\n        id: 1,\n        name: \"hold\"\n      }\n    };\n    ApiPost.getMessagesFromChat(post).then(e => {\n      const textMessagesElement = e.map(el => {\n        if (el.fromUser !== props.currentUser) {\n          return /*#__PURE__*/_jsxDEV(Flex, {\n            background: \"red.200\",\n            width: \"fit-content\",\n            minWidth: \"100px\",\n            borderRadius: \"lg\",\n            p: 3,\n            alignSelf: \"flex-end\",\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              children: [\"From \", el.fromUser, \": \", el.messageText]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 17\n            }, this)\n          }, el.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(Flex, {\n            background: \"green.200\",\n            width: \"fit-content\",\n            minWidth: \"100px\",\n            borderRadius: \"lg\",\n            p: 3,\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              children: el.messageText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 17\n            }, this)\n          }, el.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this);\n        }\n      });\n      setMessagesToShow(textMessagesElement);\n    });\n  }\n  function updateMessage(event) {\n    const textMessage = event.target.value;\n    setMessageToSend(textMessage);\n  }\n  function sendMessage() {\n    const post = {\n      fromUser: props.userProfileInfoForUI.id,\n      fk_conversation: {\n        id: whatChatToShow,\n        name: \"Chat with friends\"\n      },\n      messageText: messageToSend\n    };\n    ApiPost.sendMessage(post).then(e => getMessages());\n    setMessageToSend(\"\");\n  }\n\n  // var ddd = setInterval(function(){ //Dont remove\n  //\n  //\n  //\n  // }, 5000);\n\n  const chatMessages = currentChat.messages.map(item => {\n    if (props.currentUser !== item.Sender) {\n      return /*#__PURE__*/_jsxDEV(Flex, {\n        background: \"red.200\",\n        width: \"fit-content\",\n        minWidth: \"100px\",\n        borderRadius: \"lg\",\n        p: 3,\n        alignSelf: \"flex-end\",\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          children: [\"From \", item.Sender, \": \", item.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this)\n      }, item.orderNumber, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Flex, {\n        background: \"green.200\",\n        width: \"fit-content\",\n        minWidth: \"100px\",\n        borderRadius: \"lg\",\n        p: 3,\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          children: item.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 13\n        }, this)\n      }, item.orderNumber, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this);\n    }\n  });\n  function test() {\n    getChatUserIsPartOf();\n  }\n  if (!props.authorized) {\n    //return <Navigate to=\"/\" />;\n  }\n  //Made a const for condisonal rendering\n  const chatWindow = /*#__PURE__*/_jsxDEV(Flex, {\n    background: \"red.200\",\n    flex: 10,\n    width: \"100%\",\n    height: \"100vh\",\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      direction: \"column\",\n      background: \"gray.100\",\n      flex: 100,\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        h: \"100px\",\n        background: \"blue.100\",\n        align: \"center\",\n        p: 5,\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          src: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Heading, {\n          size: \"lg\",\n          children: currentChat.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        direction: \"column\",\n        background: \"gray.100\",\n        flex: 1,\n        overflowX: \"scroll\",\n        children: messagesToShow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          placeholder: \"Type text to send\",\n          onChange: updateMessage,\n          name: \"messageToSend\",\n          value: messageToSend\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    height: \"100vh\",\n    alignItems: \"top\",\n    justifyContent: \"left\",\n    backgroundColor: \"orange.400\",\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      direction: \"column\",\n      background: formBackground,\n      p: 12,\n      rounded: 6,\n      position: \"fixed\" //This one makes it overlap\n      ,\n      height: \"100%\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        className: \"toProfileButton\",\n        width: \"100%\",\n        colorScheme: \"blue\",\n        onClick: navigateToProfile,\n        mb: 3,\n        children: [\" \", \"To profile\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), whatGroupToShow]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      direction: \"column\",\n      children: whatChatToShow !== 0 && chatWindow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"9zw+HBER18GO/4oJIM0KH6z29uU=\", false, function () {\n  return [useNavigate, useColorModeValue];\n});\n_c = Chat;\n{\n  /* <Button\r\n  className=\"toProfileButton\"\r\n  width=\"100%\"\r\n  colorScheme=\"blue\"\r\n  onClick={testFunction}\r\n  mb={3}\r\n  >\r\n  {\" \"}\r\n  Test button\r\n  </Button>\r\n  \r\n  */\n}\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","chatData","userData","Navigate","useNavigate","Button","Flex","Heading","Input","Image","useColorMode","useColorModeValue","Spacer","theme","Topbar","Avatar","FormControl","Text","ApiCall","ApiPost","Chat","props","navigate","formBackground","whatChatToShow","setWhatChatToShow","useState","whatGroupToShow","setWhatGroupToShow","messageToSend","setMessageToSend","count","setCount","messagesToShow","setMessagesToShow","chatsUserIsPartOf","setChatsUserIsPartOf","currentGroupMembers","setCurrentGroupMembers","currentChat","setCurrentChat","id","title","messages","message","Sender","orderNumber","members","useEffect","getChatUserIsPartOf","requestLoop","setInterval","post","fk_conversation","name","getMessagesFromChat","then","e","textMessagesElement","map","el","fromUser","currentUser","messageText","prevValue","console","log","users","push","find","user","switchChat","event","buttonClicked","target","innerText","chatItem","element","findUserName","undefined","usr","gree","userProfileInfoForUI","chatMembers","includes","theRealID","getChatsUserIsPartOf","chats","chatsUserIsPartOf1","filter","navigateToProfile","getMessages","updateMessage","textMessage","value","sendMessage","chatMessages","item","test","authorized","chatWindow"],"sources":["C:/Users/krafr/Documents/GitHub/ID1212-Natverksprogrammering/Project/ID1212_Project_Intelij/src/main/webApp/project_front_end/src/components/Chat.js"],"sourcesContent":["import React from \"react\";\r\nimport chatData from \"../chatData\";\r\nimport userData from \"../userData\";\r\nimport { Navigate, useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Flex,\r\n  Heading,\r\n  Input,\r\n  Image,\r\n  useColorMode,\r\n  useColorModeValue,\r\n  Spacer,\r\n  theme,\r\n  Topbar,\r\n  Avatar,\r\n  FormControl,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport ApiCall from \"../ApiInterface/ApiCall\";\r\nimport ApiPost from \"../ApiInterface/ApiPost\";\r\n\r\nexport default function Chat(props) {\r\n  const navigate = useNavigate();\r\n  const formBackground = useColorModeValue(\"gray.100\", \"gray.700\");\r\n  const [whatChatToShow, setWhatChatToShow] = React.useState(0);\r\n  const [whatGroupToShow, setWhatGroupToShow] = React.useState(1);\r\n  const [messageToSend, setMessageToSend] = React.useState(\"\");\r\n  const [count, setCount] = React.useState(0)\r\n  const [messagesToShow, setMessagesToShow] = React.useState();\r\n  const [chatsUserIsPartOf, setChatsUserIsPartOf] = React.useState();\r\n  const [currentGroupMembers, setCurrentGroupMembers] = React.useState([\r\n    0,\r\n    \"Nobody\",\r\n  ]);\r\n  const [currentChat, setCurrentChat] = React.useState({\r\n    id: 0,\r\n    title: \"\",\r\n    messages: [{ message: \"\", Sender: 0, orderNumber: 1 }],\r\n    members: [0],\r\n  });\r\n\r\n\r\n\r\n\r\n\r\n\r\n  React.useEffect(() => {\r\n\r\n\r\n\r\n\r\n    getChatUserIsPartOf()\r\n\r\n    var requestLoop = setInterval(function(){ //Dont remove\r\n      const post = {\r\n        fk_conversation: {id: 1, name: \"hold\"}\r\n      };\r\n      ApiPost.getMessagesFromChat(post).then(e=> {\r\n\r\n        const textMessagesElement = e.map(el=> {\r\n          if(el.fromUser !== props.currentUser ){\r\n            return (\r\n                <Flex\r\n                    key={el.id}\r\n                    background=\"red.200\"\r\n                    width=\"fit-content\"\r\n                    minWidth=\"100px\"\r\n                    borderRadius=\"lg\"\r\n                    p={3}\r\n                    alignSelf=\"flex-end\"\r\n                >\r\n                  <Text>\r\n                    From {el.fromUser}: {el.messageText}\r\n                  </Text>\r\n                </Flex>\r\n            );\r\n          }else{\r\n            return (\r\n                <Flex\r\n                    key={el.id}\r\n                    background=\"green.200\"\r\n                    width=\"fit-content\"\r\n                    minWidth=\"100px\"\r\n                    borderRadius=\"lg\"\r\n                    p={3}\r\n                >\r\n                  <Text>{el.messageText}</Text>\r\n                </Flex>\r\n            );\r\n          }\r\n        })\r\n        setMessagesToShow(textMessagesElement);\r\n\r\n      })\r\n      setCount(prevValue => prevValue++)\r\n      console.log(count)\r\n    }, 5000);\r\n  }, []);\r\n\r\n\r\n  React.useEffect(() => {\r\n\r\n    var users = [];\r\n    currentChat.members.map((e) => {\r\n      users.push(userData.find((user) => user.id === e));\r\n    });\r\n\r\n    setCurrentGroupMembers(users);\r\n  }, [currentChat]);\r\n\r\n\r\n\r\n\r\n  function switchChat(event) {\r\n    const buttonClicked = event.target.innerText;\r\n    const chatItem = chatData.find((element) => element.title == buttonClicked);\r\n    setWhatChatToShow(chatItem.id);\r\n    setCurrentChat(chatItem);\r\n  }\r\n\r\n  function findUserName(id) {\r\n    if (id !== undefined && id !== 0) {\r\n      const usr = currentGroupMembers.find((e) => e.id === id);\r\n      return \"h\";\r\n    } else {\r\n      return \"Error\";\r\n    }\r\n  }\r\n\r\n\r\n\r\n  function gree(element) {\r\n\r\n    const currentUser = props.userProfileInfoForUI.id;\r\n    const chatMembers = element.members;\r\n\r\n    return chatMembers.includes(currentUser);\r\n  }\r\n\r\n\r\n  function getChatUserIsPartOf(){\r\n    const post = {\r\n      id: props.userProfileInfoForUI.theRealID\r\n    };\r\n\r\n    ApiPost.getChatsUserIsPartOf(post).then(e=> {\r\n      const chats = e.map((el) => {\r\n          return (\r\n              <Button key={el.id} onClick={switchChat}>\r\n                {\" \"}\r\n                {el.name}{\" \"}\r\n              </Button>\r\n          );\r\n      })\r\n      setWhatGroupToShow(chats)\r\n    })\r\n  }\r\n  const chatsUserIsPartOf1 = chatData.filter(gree);\r\n\r\n\r\n  function navigateToProfile() {\r\n    navigate(\"/profile\");\r\n  }\r\n\r\n  function getMessages() {\r\n    const post = {\r\n      fk_conversation: {id: 1, name: \"hold\"}\r\n    };\r\n    ApiPost.getMessagesFromChat(post).then(e=> {\r\n\r\n      const textMessagesElement = e.map(el=> {\r\n        if(el.fromUser !== props.currentUser ){\r\n          return (\r\n              <Flex\r\n                  key={el.id}\r\n                  background=\"red.200\"\r\n                  width=\"fit-content\"\r\n                  minWidth=\"100px\"\r\n                  borderRadius=\"lg\"\r\n                  p={3}\r\n                  alignSelf=\"flex-end\"\r\n              >\r\n                <Text>\r\n                  From {el.fromUser}: {el.messageText}\r\n                </Text>\r\n              </Flex>\r\n          );\r\n        }else{\r\n          return (\r\n              <Flex\r\n                  key={el.id}\r\n                  background=\"green.200\"\r\n                  width=\"fit-content\"\r\n                  minWidth=\"100px\"\r\n                  borderRadius=\"lg\"\r\n                  p={3}\r\n              >\r\n                <Text>{el.messageText}</Text>\r\n              </Flex>\r\n          );\r\n        }\r\n      })\r\n      setMessagesToShow(textMessagesElement);\r\n\r\n    })\r\n\r\n  }\r\n\r\n  function updateMessage(event) {\r\n    const textMessage = event.target.value;\r\n\r\n    setMessageToSend(textMessage);\r\n  }\r\n\r\n  function sendMessage() {\r\n    const post = {\r\n      fromUser: props.userProfileInfoForUI.id,\r\n      fk_conversation: {id: whatChatToShow, name: \"Chat with friends\"},\r\n      messageText: messageToSend,\r\n    };\r\n    ApiPost.sendMessage(post).then(e =>getMessages())\r\n    setMessageToSend(\"\");\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // var ddd = setInterval(function(){ //Dont remove\r\n  //\r\n  //\r\n  //\r\n  // }, 5000);\r\n\r\n\r\n  const chatMessages = currentChat.messages.map((item) => {\r\n    if (props.currentUser !== item.Sender) {\r\n      return (\r\n          <Flex\r\n              key={item.orderNumber}\r\n              background=\"red.200\"\r\n              width=\"fit-content\"\r\n              minWidth=\"100px\"\r\n              borderRadius=\"lg\"\r\n              p={3}\r\n              alignSelf=\"flex-end\"\r\n          >\r\n            <Text>\r\n              From {item.Sender}: {item.message}\r\n            </Text>\r\n          </Flex>\r\n      );\r\n    } else {\r\n      return (\r\n          <Flex\r\n              key={item.orderNumber}\r\n              background=\"green.200\"\r\n              width=\"fit-content\"\r\n              minWidth=\"100px\"\r\n              borderRadius=\"lg\"\r\n              p={3}\r\n          >\r\n            <Text>{item.message}</Text>\r\n          </Flex>\r\n      );\r\n    }\r\n  });\r\n\r\n  function test(){\r\n    getChatUserIsPartOf()\r\n  }\r\n\r\n  if (!props.authorized) {\r\n    //return <Navigate to=\"/\" />;\r\n  }\r\n  //Made a const for condisonal rendering\r\n  const chatWindow = (\r\n    <Flex background=\"red.200\" flex={10} width=\"100%\" height=\"100vh\">\r\n      <Flex direction=\"column\" background={\"gray.100\"} flex={100}>\r\n        <Flex h=\"100px\" background={\"blue.100\"} align=\"center\" p={5}>\r\n          <Avatar src=\"\" />\r\n          <Heading size=\"lg\">{currentChat.title}</Heading>\r\n        </Flex>\r\n\r\n        <Flex\r\n          direction=\"column\"\r\n          background={\"gray.100\"}\r\n          flex={1}\r\n          overflowX=\"scroll\"\r\n        >\r\n          {messagesToShow}\r\n        </Flex>\r\n\r\n        <FormControl>\r\n          <Input\r\n            type=\"text\"\r\n            placeholder=\"Type text to send\"\r\n            onChange={updateMessage}\r\n            name=\"messageToSend\"\r\n            value={messageToSend}\r\n          />\r\n          <Button type=\"submit\" onClick={sendMessage}>\r\n            Send\r\n          </Button>\r\n        </FormControl>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n  return (\r\n    <Flex\r\n      height=\"100vh\"\r\n      alignItems=\"top\"\r\n      justifyContent=\"left\"\r\n      backgroundColor=\"orange.400\"\r\n    >\r\n      <Flex\r\n        direction=\"column\"\r\n        background={formBackground}\r\n        p={12}\r\n        rounded={6}\r\n        position=\"fixed\" //This one makes it overlap\r\n        height=\"100%\"\r\n      >\r\n        <Button\r\n          className=\"toProfileButton\"\r\n          width=\"100%\"\r\n          colorScheme=\"blue\"\r\n          onClick={navigateToProfile}\r\n          mb={3}\r\n        >\r\n          {\" \"}\r\n          To profile\r\n        </Button>\r\n        {whatGroupToShow}\r\n      </Flex>\r\n      <Spacer />\r\n\r\n      <Flex direction=\"column\">{whatChatToShow !== 0 && chatWindow}</Flex>\r\n    </Flex>\r\n  );\r\n}\r\n\r\n{\r\n  /* <Button\r\nclassName=\"toProfileButton\"\r\nwidth=\"100%\"\r\ncolorScheme=\"blue\"\r\nonClick={testFunction}\r\nmb={3}\r\n>\r\n{\" \"}\r\nTest button\r\n</Button>\r\n\r\n\r\n\r\n*/\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}